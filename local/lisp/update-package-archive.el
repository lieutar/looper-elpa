;; -*- lexical-binding: t -*-
(require 'cl-lib)
(require 'f)
(require 's)
(require 'dash)
(require 'ppp)

(defconst public-repository-prefix "https://github.com/")
(defconst recipes-alist ())

(defun read-recipes (recipes)
  (dolist (bn (directory-files recipes))
    (let* ((file (f-expand bn recipes)))
      (when (f-file-p file)
        (push (read (f-read file)) recipes-alist))))
  (pp recipes-alist))

(defun get-package-url (package)
  (let ((slot (assq package recipes-alist)))
    (unless slot (error "unknown package: %s" package))
    (let ((repo (plist-get (cdr slot) :repo)))
      (concat public-repository-prefix repo))))

(defun update-entry-data (data)
  (let* ((array (cdr data))
         (alist (aref array 4))
         (url-slot (assq :url alist))
         (url (get-package-url (car data))))
    (if url-slot
        (setcdr url-slot url)
      (nconc alist (list (cons :url url))))))

(defun update-archive-contents (packages)
  (let* ((file (f-expand "archive-contents" packages))
         (data (read (f-read file))))
    (dolist (slot (cdr data)) (update-entry-data slot))
    (message "update %s" file)
    (with-temp-file file (insert (ppp-sexp-to-string data)))))

(defun update-elpa-packages.eld (packages)
  (let* ((file  (f-expand "elpa-packages.eld" packages))
         (data  (read (f-read file))))
    (dolist (slot (car data))
      (let ((plist (cdr slot)))
        (plist-put plist :url (get-package-url (car slot)))))
    (message "update %s" file)
    (with-temp-file file (insert (ppp-sexp-to-string data)))
    ))

(defun update-entry (file)
  (let ((data (read (f-read file))))
    (update-entry-data data)
    (message "update %s" file)
    (with-temp-file file (insert (ppp-sexp-to-string data)))))

(cl-destructuring-bind (packages recipes) command-line-args-left
  (read-recipes recipes)
  (update-archive-contents packages)
  (update-elpa-packages.eld packages)
  (dolist (basename (directory-files packages))
    (let ((file (f-expand basename packages)))
      (when (and (f-file-p file)
                 (s-match "\\.entry\\'" file))
        (update-entry file)))))
